{"version":3,"file":"static/js/955.1ebe2683.chunk.js","mappings":"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","sources":["webpack://alanominator/./src/pages/authPages/authPages.module.scss?c19d","webpack://alanominator/./src/components/UI/FormButton/FormButton.module.scss?0755","components/UI/FormButton/FormButton.jsx","webpack://alanominator/./src/components/UI/FormInput/FormInput.module.scss?3c58","components/UI/FormInput/FormInput.jsx","hooks/useFetching.ts","pages/authPages/ResetPasswordPage/ResetPasswordPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"errorMessageWrapper\":\"authPages_errorMessageWrapper__1nb9r\",\"errorMessage\":\"authPages_errorMessage__cn6Eo\",\"form_wrapper\":\"authPages_form_wrapper__I9-Yl\",\"form\":\"authPages_form__mwH6E\",\"page_name\":\"authPages_page_name__-ata5\",\"lw\":\"authPages_lw__b9ZJ1\",\"ttl\":\"authPages_ttl__KbgBc\",\"link\":\"authPages_link__ll6x-\",\"help_link\":\"authPages_help_link__VMlan\",\"help_wrapper\":\"authPages_help_wrapper__4ETRw\",\"reCaptcha_wrapper\":\"authPages_reCaptcha_wrapper__bduQh\",\"captcha_loading\":\"authPages_captcha_loading__YQc+l\",\"captcha_loading_message\":\"authPages_captcha_loading_message__mjU5w\",\"cancelBtnWrapper\":\"authPages_cancelBtnWrapper__ey8-O\",\"cancelBtn\":\"authPages_cancelBtn__undoL\"};","// extracted by mini-css-extract-plugin\nexport default {\"button_wrapper\":\"FormButton_button_wrapper__K6Ek-\",\"button\":\"FormButton_button__saLZQ\"};","import React from 'react';\nimport cl from './FormButton.module.scss';\n\nfunction FormButton(props) {\n\n    const { children, disabled } = props\n\n    return (\n        <div className={cl.button_wrapper}>\n            <button\n                className={`${cl.button} button`}\n                type='submit'\n                disabled={disabled}\n                {...props}\n            >\n                {children}\n            </button>\n        </div>\n    )\n}\n\nexport default FormButton","// extracted by mini-css-extract-plugin\nexport default {\"input_main_wrapper\":\"FormInput_input_main_wrapper__ujvJw\",\"input_field\":\"FormInput_input_field__QYl9j\",\"label\":\"FormInput_label__04RR4\",\"input\":\"FormInput_input__uBaqY\",\"label_active\":\"FormInput_label_active__6tHVz\",\"red_message\":\"FormInput_red_message__1EyIk\"};","import React from 'react';\nimport { Field, ErrorMessage } from 'formik';\nimport cl from './FormInput.module.scss';\n\n\nfunction FormInput(props) {\n    const { label, name, placeholder, hasError, value, touched, ...rest } = props\n\n    return (\n        <div\n            className={`${cl.input_main_wrapper} input_main_wrapper`}\n        >\n\n            <div\n                className={cl.input_field}\n            >\n                <label\n                    htmlFor={name}\n                    className={`${`${cl.label} label`} ${value && `${cl.label_active} label_active`}`}\n                >\n                    {placeholder}\n                </label>\n                <Field\n                    className={`${`${cl.input} input`} ${hasError ? `${cl.has_errors} has_errors` : touched && `${cl.correct} correct`}`}\n                    as=\"input\"\n                    id={name}\n                    name={name}\n                    {...rest}\n                />\n            </div>\n\n            <span className={`${cl.red_message} red_message`}>\n                <ErrorMessage name={name} />\n            </span>\n\n        </div>\n    )\n}\n\nexport default FormInput;","import { useState } from \"react\";\n\nexport const useFetching = (callback: Function) => {\n    const [Loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    const fetching = async (...args: any) => {\n        try {\n            setLoading(true)\n            await callback(...args)\n        } catch (e: any) { // TODO type error\n            setError(e.message)\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return [fetching, Loading, error] as const\n}","import React, { useState, useEffect, FC } from 'react'\nimport * as Yup from 'yup';\nimport { Formik, Form } from 'formik'\nimport { useFetching } from '../../../hooks/useFetching';\nimport axios from 'axios';\nimport { basic_url } from '../../../API/APISettings';\nimport FormButton from '../../../components/UI/FormButton/FormButton';\nimport FormInput from '../../../components/UI/FormInput/FormInput';\nimport { useNavigate } from 'react-router-dom';\n// import { isEmpty } from '../funcs';\n\nimport cl from '../authPages.module.scss';\nimport Loader from '../../../components/UI/Loader/Loader';\nimport { useTranslation } from 'react-i18next';\n\nimport { useAlert } from 'react-alert';\n\nenum StatesOfForm {\n    sendActivationPassword = 'sendActivationPassword',\n    setNewPassword = 'setNewPassword',\n    checkResetPassword = 'checkResetPassword',\n}\n\nfunction ResetPasswordPage() {\n    const alert = useAlert()\n    const { t } = useTranslation()\n    const navigate = useNavigate()\n    // \n\n\n    const [responseError, setResponseError] = useState<string>(\"\")\n\n    const [stateOfForm, setStateOfForm] = useState<StatesOfForm>(StatesOfForm.sendActivationPassword)\n\n\n    // TODO Cancel button\n\n\n    const getInitialValues = () => {\n        const initial_values = {\n            email: '',\n            reset_password: '',\n            new_password: '',\n            confirm_new_password: ''\n        }\n\n\n        let values = JSON.parse(\n            localStorage.getItem(\"reset_password__form_values\")!\n        )\n\n\n        let initial_values_keys = Object.keys(initial_values)\n\n        // if local storage does not have every keys of initial_values,\n        // ___ we just return initial_values\n        if (!(initial_values_keys.every(i => Object.keys(values).includes(i)))) {\n            return initial_values\n        }\n\n        let values_to_return = {};\n\n        initial_values_keys.forEach(i => {\n            values_to_return[i] = values[i]\n        })\n\n        return values_to_return;\n    }\n\n\n    const initialValues = getInitialValues()\n\n    useEffect(() => {\n\n        if (initialValues[\"email\"]) {\n\n            if (initialValues[\"reset_password\"]) {\n                setStateOfForm(StatesOfForm.setNewPassword)\n            } else {\n                setStateOfForm(StatesOfForm.checkResetPassword)\n            }\n\n        }\n\n    }, [initialValues])\n\n\n    const reactToChangingOfFormState = () => {\n        switch (stateOfForm) {\n\n            case StatesOfForm.sendActivationPassword:\n                break;\n            case StatesOfForm.checkResetPassword:\n                // setDisabledInputs([\"email\"])\n                // setButtonText(\"Check the reset password\")\n                setValidationSchemas({\n                    ...validationSchemas,\n                    reset_password: Yup.string()\n                        .required(required)\n                        .length(5)\n                    // .test('len', 'Must be exactly 5 characters', val => val ? String(val).length === 5 : false)\n                })\n                break;\n            case StatesOfForm.setNewPassword:\n                // setDisabledInputs([\"email\"])\n                setValidationSchemas({\n                    ...validationSchemas,\n                    new_password: Yup.string()\n                        .required(required),\n                    confirm_new_password: Yup.string()\n                        .required(required)\n\n                })\n                break;\n            default:\n                console.error(\"something went wrong\")\n                break;\n        }\n    }\n\n\n\n\n\n    useEffect(() => {\n\n        reactToChangingOfFormState()\n\n    }, [stateOfForm])\n\n\n\n    let required = t('main_content.pages.auth_pages.required', \"Required\")\n\n\n    const [validationSchemas, setValidationSchemas] = useState<object>({\n        email: Yup.string()\n            .email(t('main_content.pages.auth_pages.ief', \"Invalid email format\"))\n            .required(required),\n    })\n\n\n    const YupValidation = Yup.object().shape({\n        ...validationSchemas\n    })\n\n    const [sendInstructions, LoadingSendInstructions] = useFetching(async (values: object) => {\n        const body = JSON.stringify(values);\n\n        await axios.post(`${basic_url}/users/reset_password__send_instructions/`, body, {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                alert.success(res.data.message)\n\n                setStateOfForm(StatesOfForm.checkResetPassword)\n\n                setResponseError(\"\")\n\n\n                localStorage.setItem(\"reset_password__form_values\", body)\n\n\n            })\n            .catch(err => {\n                err.response ?\n                    setResponseError(err.response.data.message)\n                    : setResponseError('Smth went wrong. Try again.')\n\n\n            });\n    })\n\n\n    const [checkResetPassword, LoadingCheckResetPassword] = useFetching(async (values: object) => {\n        const body = JSON.stringify(values);\n\n        console.log(body)\n\n        await axios.post(`${basic_url}/users/reset_password__check_reset_password/`, body, {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                alert.success(res.data.message)\n\n                setStateOfForm(StatesOfForm.setNewPassword)\n\n                setResponseError(\"\")\n\n\n                localStorage.setItem(\"reset_password__form_values\", body)\n\n            })\n            .catch(err => {\n                err.response ?\n                    setResponseError(err.response.data.message)\n                    : setResponseError('Smth went wrong. Try again.')\n            });\n    })\n\n\n    const [changePassword, LoadingChangePassword] = useFetching(async (values: object) => {\n        const body = JSON.stringify(values);\n\n        console.log(body)\n\n        await axios.post(`${basic_url}/users/reset_password__set_new_password/`, body, {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                alert.success(res.data.message)\n\n\n                setResponseError(\"\")\n\n                localStorage.removeItem(\"reset_password__form_values\")\n\n                navigate(\"/users/login\")\n\n            })\n            .catch(err => {\n                err.response ?\n                    setResponseError(err.response.data.message)\n                    : setResponseError('Smth went wrong. Try again.')\n            });\n    })\n\n\n    // TODO\n    // LoadibgCancelRegistration\n    function cancelResetingPassword() {\n        console.log(\"TODO\")\n    }\n\n\n    function onSubmit() {\n\n        switch (stateOfForm) {\n            case StatesOfForm.sendActivationPassword:\n                sendInstructions(initialValues)\n                break;\n            case StatesOfForm.checkResetPassword:\n                checkResetPassword(initialValues)\n                break;\n            case StatesOfForm.setNewPassword:\n                changePassword(initialValues)\n                break;\n            default:\n                console.error(\"something went wrong\")\n                break;\n        }\n\n    }\n\n\n\n    return (\n        <>\n            {(LoadingSendInstructions || LoadingCheckResetPassword || LoadingChangePassword) &&\n                <div className='loader_wrapper'>\n                    <Loader />\n                </div>\n            }\n            {responseError &&\n                <div className={`${cl.errorMessageWrapper}`}>\n                    <span className={`${cl.errorMessage} errorMessage`}>\n                        {responseError}\n                    </span>\n                </div>\n            }\n\n            <div className={cl.form_wrapper}>\n                <Formik\n                    initialValues={initialValues}\n                    validationSchema={YupValidation}\n                    onSubmit={onSubmit}\n                >\n                    {({ errors, touched, values }) => (\n                        <Form\n                            className={`${cl.form} form`}\n                            autoComplete='off'\n                        >\n                            <b className={`${cl.page_name} auth_page_name`}>\n                                Reseting password\n                            </b>\n\n                            <FormInput\n                                name=\"email\"\n                                placeholder={t('main_content.pages.auth_pages.email', \"email\")}\n                                type=\"email\"\n                                autoFocus={true}\n                                value={values[\"email\"]}\n                                touched={touched[\"email\"]}\n                                hasError={errors[\"email\"]}\n                                spellCheck=\"false\"\n\n                                autoComplete=\"true\"\n\n                                disabled={\n                                    stateOfForm === StatesOfForm.checkResetPassword\n                                    ||\n                                    stateOfForm === StatesOfForm.setNewPassword\n                                }\n                            />\n\n                            {(() => {\n                                switch (stateOfForm) {\n                                    case StatesOfForm.sendActivationPassword:\n                                        return (\n                                            <>\n                                            </>\n                                        )\n                                    case StatesOfForm.checkResetPassword:\n                                        return (\n                                            <FormInput\n                                                name=\"reset_password\"\n                                                placeholder=\"reset password\"\n                                                type=\"text\"\n\n                                                inputMode=\"numeric\"\n\n\n                                                value={values[\"reset_password\"]}\n                                                touched={touched[\"reset_password\"]}\n                                                hasError={errors[\"reset_password\"]}\n                                            />\n                                        )\n                                    case StatesOfForm.setNewPassword:\n                                        return (\n                                            <>\n                                                <FormInput\n                                                    name=\"new_password\"\n                                                    placeholder=\"new password\"\n                                                    type=\"password\"\n\n                                                    value={values[\"new_password\"]}\n                                                    touched={touched[\"new_password\"]}\n                                                    hasError={errors[\"new_password\"]}\n\n                                                    autoComplete=\"off\"\n                                                />\n\n                                                <FormInput\n                                                    name=\"confirm_new_password\"\n                                                    placeholder=\"confirm_new_password\"\n                                                    type=\"password\"\n\n                                                    value={values[\"confirm_new_password\"]}\n                                                    touched={touched[\"confirm_new_password\"]}\n                                                    hasError={errors[\"confirm_new_password\"]}\n\n\n                                                    autoComplete=\"off\"\n                                                />\n                                            </>\n                                        )\n                                    default:\n                                        return (\n                                            <>\n                                                ERROR\n                                            </>\n                                        )\n                                }\n                            })()}\n\n                            <FormButton\n                                // disabled={\n                                //     LoadingLoginUser ||\n                                // !(isEmpty(errors) && !isEmpty(touched))\n                                // }\n                                type=\"submit\"\n                            >\n                                {(() => {\n                                    switch (stateOfForm) {\n                                        case StatesOfForm.sendActivationPassword:\n                                            return 'Send instructions'\n                                        case StatesOfForm.checkResetPassword:\n                                            return 'Check the reset password'\n                                        case StatesOfForm.setNewPassword:\n                                            return 'Set new password'\n                                    }\n                                })()}\n                            </FormButton>\n\n                            {\n                                (\n                                    stateOfForm === StatesOfForm.checkResetPassword ||\n                                    stateOfForm === StatesOfForm.setNewPassword\n                                ) ?\n                                    <div className={cl.cancelBtnWrapper}>\n                                        <span className={cl.cancelBtn} onClick={cancelResetingPassword}>\n                                            cancel\n                                        </span>\n                                    </div>\n                                    : <></>\n                            }\n\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        </>\n    )\n}\n\nexport default ResetPasswordPage;"],"names":["props","children","disabled","className","cl","type","label","name","placeholder","hasError","value","touched","rest","htmlFor","as","id","useFetching","callback","useState","Loading","setLoading","error","setError","fetching","message","StatesOfForm","alert","useAlert","t","useTranslation","navigate","useNavigate","responseError","setResponseError","sendActivationPassword","stateOfForm","setStateOfForm","initialValues","initial_values","email","reset_password","new_password","confirm_new_password","values","JSON","parse","localStorage","getItem","initial_values_keys","Object","keys","every","i","includes","values_to_return","forEach","getInitialValues","useEffect","setNewPassword","checkResetPassword","setValidationSchemas","validationSchemas","Yup","required","length","console","reactToChangingOfFormState","YupValidation","shape","body","stringify","axios","basic_url","headers","then","res","success","data","setItem","catch","err","response","sendInstructions","LoadingSendInstructions","log","LoadingCheckResetPassword","removeItem","changePassword","LoadingChangePassword","cancelResetingPassword","validationSchema","onSubmit","errors","autoComplete","autoFocus","spellCheck","inputMode","onClick"],"sourceRoot":""}